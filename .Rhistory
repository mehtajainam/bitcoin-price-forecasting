install.packages("Quandl")
knitr::opts_chunk$set(echo = TRUE)
library(Quandl)
Quandl.api_key("UqYbx-p5DwWzyT8AH2c7")
marketpriceUSD<-Quandl("BCHAIN/MKPRU")
View(marketpriceUSD)
View(marketpriceUSD)
View(marketpriceUSD)
View(marketpriceUSD)
head(marketpriceUSD)
tail(marketpriceUSD)
BTC <- rev(marketpriceUSD)
head(BTC)
View(BTC)
plot(BTC)
BTC <- ts(BTC)
plot(BTC)
View(BTC)
?rev
a <- list(1, 3,2)
a
rev(a)
rev(marketpriceUSD$Value)
c(start = tail(marketpriceUSD$Date, 1), end = head(marketpriceUSD$Date, 1))
chron <- rev(marketpriceUSD$Value)
c(start = tail(marketpriceUSD$Date, 1), end = head(marketpriceUSD$Date, 1))
library(xts)
test <- rev(marketpriceUSD)
View(test)
chron <- rev(marketpriceUSD$Value)
c(start = tail(marketpriceUSD$Date, 1), end = head(marketpriceUSD$Date, 1))
BTC <- ts(chron, start = c(2009, 1, 3), end = c(2020, 5, 17))
plot(as.xts(BTC))
library(xts)
BTC <- ts(chron, start = c(2009, 1, 3), end = c(2020, 5, 17))
plot(as.xts(BTC))
chron <- rev(marketpriceUSD$Value)
c(start = tail(marketpriceUSD$Date, 1), end = head(marketpriceUSD$Date, 1))
chron <- rev(marketpriceUSD$Value)
library(Quandl)
Quandl.api_key("UqYbx-p5DwWzyT8AH2c7")
marketpriceUSD<-Quandl("BCHAIN/MKPRU")
chron <- rev(marketpriceUSD$Value)
View(marketpriceUSD)
chron <- rev(marketpriceUSD$Value)
marketpriceUSD$Value
rev(marketpriceUSD$Value)
tail(chron)
tail(chron)
chron <- rev(marketpriceUSD$Value)
c(start = tail(marketpriceUSD$Date, 1), end = head(marketpriceUSD$Date, 1))
plot(BTC)
tail(BTC)
BTC
BTC <- ts(chron, start = c(2009, 1, 3))
plot(BTC)
BTC <- ts(chron, start = c(2009, 1, 3), frequency = 365)
BTC <- ts(chron, start = c(2009, 1, 3), frequency = 365.25)
plot(BTC)
plot(as.xts(BTC))
BTC <- ts(chron, start = c(2009, 1, 3), frequency = 365)
plot(as.xts(BTC))
plot(BTC)
?window
# focus on 2016 onwards
BTC.recent <- window(BTC, start = c(2016, 1, 1))
# focus on 2016 onwards
BTC.recent <- window(BTC, start = c(2016, 1, 1))
# focus on 2016 onwards
BTC.recent <- window(BTC, start = 2016)
plot(BTC.recent)
library(tseries)
adf.test(BTC.recent)
kpss.test(BTC.recent)
?kpss.test
kpss.test(BTC.recent)
BTC.diff <- diff(BTC.recent)
plot(BTC.diff)
?diff
BTC.diff <- diff(BTC.recent, lag = 1)
plot(BTC.diff)
kpss.test(BTC.diff)
BTC.diff <- diff(BTC.recent, lag = 1)
plot(BTC.diff)
adf.test(BTC.diff)
kpss.test(BTC.diff)
# focus on 2016 onwards
train <- window(BTC, start = 2016, end  = 2019)
test <- window(BTC, start = 2020)
plot(train)
tail(train)
train
index(train)
tail(index(train))
tail(index(train))
# focus on 2016 onwards
train <- window(BTC, start = 2016, end  = 2020)
test <- window(BTC, start = 2020)
tail(index(train))
plot(train)
adf.test(train)
kpss.test(train)
plot(test)
train.diff <- diff(train, lag = 1)
plot(train.diff)
adf.test(train.diff)
kpss.test(train.diff)
??auto.arima
library(tseries)
library(forecast)
fit <- auto.arima(train)
(fit <- auto.arima(train))
forecast(fit, h = 90)
plot(forecast(fit, h = 90))
?auto.arima
(fit <- auto.arima(train, allowdrift = T))
preds <- forecast(fit, h=10)
plot(preds)
preds <- forecast(fit, h=90)
plot(preds)
knitr::opts_chunk$set(echo = TRUE)
library(tseries)
library(forecast)
library(Quandl)
Quandl.api_key("UqYbx-p5DwWzyT8AH2c7")
marketpriceUSD<-Quandl("BCHAIN/MKPRU")
chron <- rev(marketpriceUSD$Value)
c(start = tail(marketpriceUSD$Date, 1), end = head(marketpriceUSD$Date, 1))
BTC <- ts(chron, start = c(2009, 1, 3), frequency = 365)
# focus on 2016 onwards
train <- window(BTC, start = 2019, end  = 2020)
test <- window(BTC, start = 2020)
plot(train)
adf.test(train)
kpss.test(train)
train.diff <- diff(train, lag = 1)
plot(train.diff)
adf.test(train.diff)
kpss.test(train.diff)
(fit <- auto.arima(train, allowdrift = T))
forecast <- forecast(fit, h=90)
plot(forecast)
(fit <- auto.arima(train.diff, allowdrift = T))
forecast <- forecast(fit, h=90)
plot(forecast)
(fit <- auto.arima(train, allowdrift = T, stationary = F))
(fit <- auto.arima(train, allowdrift = T, stationary = F))
forecast <- forecast(fit, h=90)
plot(forecast)
(fit <- auto.arima(train, allowdrift = T))
knitr::opts_chunk$set(echo = TRUE)
library(tseries)
library(forecast)
library(Quandl)
Quandl.api_key("UqYbx-p5DwWzyT8AH2c7")
marketpriceUSD<-Quandl("BCHAIN/MKPRU")
chron <- rev(marketpriceUSD$Value)
c(start = tail(marketpriceUSD$Date, 1), end = head(marketpriceUSD$Date, 1))
BTC <- ts(chron, start = c(2009, 1, 3), frequency = 365)
# focus on 2016 onwards
train <- window(BTC, start = 2016, end  = 2020)
test <- window(BTC, start = 2020)
plot(train)
adf.test(train)
kpss.test(train)
train.diff <- diff(train, lag = 1)
plot(train.diff)
adf.test(train.diff)
kpss.test(train.diff)
(fit <- auto.arima(train, allowdrift = T))
forecast <- forecast(fit, h=90)
plot(forecast)
plot(forecast)
(fit <- auto.arima(train, allowdrift = T))
forecast <- forecast(fit, h=138)
plot(forecast)
accuracy(fit)
checkresiduals(fit)
checkresiduals(forecast)
plot(as.xts(train))
# focus on 2016 onwards
train <- window(BTC, start = c(2016,1), end  = 2020)
plot(as.xts(train))
View(marketpriceUSD)
# focus on 2016 onwards
train <- window(BTC, start = c(2016,1), end  = 2020, frequency = 365)
plot(as.xts(train))
# focus on 2016 onwards
train <- window(BTC, start = c(2016), end  = 2020, frequency = 365)
plot(as.xts(train))
# focus on 2016 onwards
train <- window(BTC, start = c(2016, 1,1), end  = 2020, frequency = 365)
# focus on 2016 onwards
train <- window(BTC, start = 2016, end  = 2020, frequency =365)
plot(as.xts(train))
# focus on 2016 onwards
train <- window(BTC, start = 2016, end  = 2020)
test <- window(BTC, start = 2020)
plot(as.xts(train))
plot(train))0
plot(train)
residuals <- test - forecast$mean
mean(rec.residuals)
checkresiduals(residuals)
shapiro.test(rec.residuals)
shapiro.test(residuals)
checkresiduals(residuals)
mean(residuals)
train.append <- train
dirrec.forecast <- c()
dirrec.model <- list()
for (i in 1:30) {
model <- auto.arima(train.append)
dirrec.model[[i]] <- model
forecast <- forecast(model, h = 1)$mean
dirrec.forecast <- c(dirrec.forecast, forecast)
train.append <- ts(c(train.append, forecast), start = c(1975, 1), frequency = 12)
}
plot(1:30, dirrec.forecast)
plot(1:30, dirrec.forecast, type = l)
plot(1:30, dirrec.forecast, type = 'l')
lines(1:30, test[1:30], type = 'l', col = 'blue')
plot(1:30, dirrec.forecast, type = 'l')
lines(1:30, test[1:30], type = 'l', col = 'blue')
plot(test[1:30])
plot(1:30, test[1:30], type = 'l')
lines(1:30, dirrec.forecast, type = 'l', col = 'blue')
forecast$mean
(fit <- auto.arima(train, allowdrift = T))
forecast <- forecast(fit, h=138)
plot(forecast)
forecast$mean
forecast$mean[1:30]
plot(1:30, test[1:30], type = 'l')
lines(1:30, dirrec.forecast, type = 'l', col = 'blue')
forecast$mean[1:30]
dirrec.forecast
plot(1:30, test[1:30], type = 'l')
lines(1:30, dirrec.forecast, type = 'l', col = 'blue')
lines(1:30, forecast$mean, type = 'l', col = 'red')
plot(1:30, test[1:30], type = 'l')
lines(1:30, dirrec.forecast, type = 'l', col = 'blue')
lines(1:30, forecast$mean[1:30], type = 'l', col = 'red')
#forecast$mean[1:30]
#dirrec.forecast
plot(1:30, test[1:30], type = 'l', lwd = 2,
main = 'Bitcoin price in Jan 2020',
xlab = 'January', ylab = 'Price')
lines(1:30, forecast$mean[1:30], type = 'l', lwd = 2, col = 'purple')
lines(1:30, dirrec.forecast, type = 'l', lwd = 2, col = 'orange')
legend("topright", legend=c("Actual", "Rec", "DirRec"),
col=c("black", "purple", "orange"), lty=1, cex=0.8)
#forecast$mean[1:30]
#dirrec.forecast
residuals <- test - forecast$mean
mean(residuals)
checkresiduals(residuals)
acf(train); pacf(train)
plot(1:30, test[1:30], type = 'l', lwd = 2,
main = 'Bitcoin price in Jan 2020',
xlab = 'January', ylab = 'Price')
lines(1:30, forecast$mean[1:30], type = 'l', lwd = 2, col = 'purple')
lines(1:30, dirrec.forecast, type = 'l', lwd = 2, col = 'orange')
legend("topright", legend=c("Actual", "Rec", "DirRec"),
col=c("black", "purple", "orange"), lty=1, cex=0.8)
#forecast$mean[1:30]
#dirrec.forecast
knitr::opts_chunk$set(echo = TRUE)
library(tseries)
library(forecast)
library(Quandl)
Quandl.api_key("UqYbx-p5DwWzyT8AH2c7")
marketpriceUSD<-Quandl("BCHAIN/MKPRU")
chron <- rev(marketpriceUSD$Value)
c(start = tail(marketpriceUSD$Date, 1), end = head(marketpriceUSD$Date, 1))
BTC <- ts(chron, start = c(2009, 1, 3), frequency = 365)
# focus on 2016 onwards
train <- window(BTC, start = 2016, end  = 2020)
test <- window(BTC, start = 2020)
plot(train)
acf(train); pacf(train)
adf.test(train)
kpss.test(train)
train.diff <- diff(train, lag = 1)
plot(train.diff)
adf.test(train.diff)
kpss.test(train.diff)
(fit <- auto.arima(train, allowdrift = T))
forecast <- forecast(fit, h=138)
plot(forecast)
residuals <- test - forecast$mean
mean(residuals)
checkresiduals(residuals)
train.append <- train
dirrec.forecast <- c()
dirrec.model <- list()
for (i in 1:30) {
model <- auto.arima(train.append)
dirrec.model[[i]] <- model
f <- forecast(model, h = 1)$mean
dirrec.forecast <- c(dirrec.forecast, forecast)
train.append <- ts(c(train.append, forecast), start = c(1975, 1), frequency = 12)
}
train.append <- train
dirrec.forecast <- c()
dirrec.model <- list()
for (i in 1:30) {
model <- auto.arima(train.append)
dirrec.model[[i]] <- model
f <- forecast(model, h = 1)$mean
dirrec.forecast <- c(dirrec.forecast, f)
train.append <- ts(c(train.append, f), start = c(1975, 1), frequency = 12)
}
plot(1:30, test[1:30], type = 'l', lwd = 2,
main = 'Bitcoin price in Jan 2020',
xlab = 'January', ylab = 'Price')
lines(1:30, forecast$mean[1:30], type = 'l', lwd = 2, col = 'purple')
lines(1:30, dirrec.forecast, type = 'l', lwd = 2, col = 'orange')
legend("topright", legend=c("Actual", "Rec", "DirRec"),
col=c("black", "purple", "orange"), lty=1, cex=0.8)
#forecast$mean[1:30]
#dirrec.forecast
